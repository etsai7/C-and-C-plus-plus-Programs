Five Classes:
1. project4_test
    main is in this class. It will print out a menu of all the actions you can take as
    a user. It initialized a Student before going into the while loops. Then from then
    on the actions of the user will be passed into the Student current_student. From 
    there the actions will be analyzed and the appropriate actions called and executed.
    It will loop through continuosly as long as students don't "Take Finals." After 
    taking finals, the student has the choice of continueing in a new semester or 
    ending the program. After calling take final, the semester GPA and cumulative GPA
    will be printed.     

2.Fact
    Two Classes:
    1. class Fact
        Will contain a const string for the provided fact that is called from Get_fact.
        The string should be const because we will not be altering it. Fact will also
        contain a fact_id which is also given by Get_fact. 
            Constructor:
                Takes in an input string, the subject, to help determine what fact
                from the Project4_utilities.h it should pull.
            Variables:
                string fact_description - stores the description
                int fact_id - stores the id that is unique within its own course
                Fact *next - This will point at the next Fact in Fact_List
            Methods:
                string get_fact()    returns the string fact
                int get_id()         returns the fact id
    2. class Fact_List
        This is the List or stack of Facts.
            Constructor:
                Initialzes Fact_List_Head, at first to 0. This will point at the
                top of the stack and be used in the class methods.
            Destructor:
                Deletes all the facts in the Fact_List_Head stack by calling delete.
                Then deletes itself
            Variables:
                Fact *Fact_List_Head - pointer of type Fact that points to top of stack
            Methods
                void set_next_Fact(string)  takes in subject for new Fact, creates new 
                                            Fact, and adds it to Fact_List_Head stack.
                                            Makes sure its a new fact by checking ID.
                                            Will make sure the Fact is something new.
                bool Remove()               Deletes a Fact from the top of the stack.
                                            Uses delete on the Fact in the stack.

3. Rubric    
    This class will contain the cutoff points for certain letter grades. It will
    have the get grade function to read a given grade value and determines the 
    corresponding letter grade. Default values A >=90 etc...
        Variables:
            int A,B,C,D - will store a number that is the cutoff pt. Anything
                          that is below it will correspond to next letter grade.
                          F is not included, because anything below D will be F 
                          in the Student.cpp
        Methods:    
            string get_letter_grade(const int number_grade) returns the Letter grade
            void update_rubric() changes the values of A,B,C,D by calling 
                                 Get_grade_cutoff(&A,&B,&C,&D)
            void print_rubric() will just print out the cutoffs.
            
4. Course
    This class will have a const course_name and contain Facts.There will be a 
    typdef for Facts so that it can contain a fact and a pointer to 
    the next fact. This way the Facts will be in the form of a Stack data
    structure so when we "study", we learn another fact and add it to the top
    of the Link list and when we take an "exam", we expel it all out starting from
     the most recently added.
        Constructor:
            Takes in 2 string parameters, one for subject and another for coursename.
            Then initializes the course_Fact_List, sets subject and course name. Initially
            number_grade,exams_taken, and points_earned_so_far will be 0.
        Destructor:
            Will delete the course_Fact_List then delete itself.
        Variables:
            string course_name - stores the course name
            Fact_List *course_Fact_List - Pointer for all following facts.
            double number_grade - the grade out of 100 so far for the course
            int total_points - keeps track of how many pts earned so far in semester
            int exams_taken - keeps track of how many exams so far in semester
            string letter_grade - keeps track what the letter_grade is this semester
        Methods:
            string get_course_name() returns the name of the course
            string get_subject_name() returns the name of subject
            void study(string) Takes in the course name as a parameter so it 
                               creates a new Fact and stores it into the List of Facts
            int take_exam() expels all the Facts that exist in the List of Facts
                        and generates a random number for the exam grade for 
                        each fact that it expels. Should not exceed 100 pts. It will
                        then add this new number to total_points and do exams_take++.
                        Also returns the score for the exam so we can get letter grade.
            double calculate_grades() Prints out the scores for the exams taken and the
                                    number grade (average) of the Subject and course. It
                                    returns the number grade so a GPA and letter grade
                                    can be associated with it.
                        
5. Student
    The Student will be able to add/drop a course, ask for rubric, calculate grades,
    and take finals/finish the semester.There will be a typedef struct for courses so   
     that we can linke the courses with a next pointer and also pointer to Facts. 
        Constructor:
            No input parameters, but initalizes the array of Course pointers and
            the grading_Rubric. Sets the num_courses to 0 initially because
            at the beginning of the semester, a student hasn't added any courses
            yet. It also sets cumulative_grade_points and cumulative_courses_taken
            to 0 since the student hasn't taken anything yet. These latter 2 variables
            will be added to for the duration of the program so that we can calculate
            cumulative GPA.
        Variables:
            *course_list[6] - array that points to all the courses this student is 
                              taking. Set at 6, because we will use numbers 1-5 when
                              adding and dropping courses.
            grading_Rubric - An object of Rubric that will help set grade cutoffs.
                             Can be updated or printed. Also calculates letter grade.
            int num_courses - keeps track of how many courses the student is taking
                              this semester.
            double cumulative_grade_points - keeps track of all grade points for 
                                            every class that was ever taken.
            int cumulative_courses_taken - keeps track of all courses ever taken
                                           across all semesters.
        Methods:
            void action(int) this is just to help decide what user wants to do.
                            Look in Student.cpp to find out what each action will
                            call. After the input, it then calls another corresponding
                            method in the Student.cpp class
            void add_course(int subject, string course_name) creates a new course so that 
                                    it can be added into the course_list array. The
                                    string parameter identifies the course name.
                                    The int is to help set the subject. It is an int
                                    because there is a menu to choose from 6 different
                                    subjects. Selection is entered by an int. Also
                                    cannot have any course names the same across even
                                    different subjects because no course in the real world
                                    will have the same exact name. However capitilization
                                    and lowercase will be different course names.
                                    courses++;
            void drop_course(strint course_name) goes through the List of courses
                                    and compares the name of courses. When it finds 
                                    the correct one, it will pop out/delete the Fact_List
                                    and then delete the Course. Then courses--;
            void ask_for_prof_rubric() basically calls the update method through the
                                        grading_Rubric. There it will set new values
                                        for the curves/rubric.
             Rubric get_Rubric() Will call the Rubric's print function which then
                                print out the new Rubric.
             void calculate_grades() runs through the entire course List and tells
                                    each course to calculate grade and print both
                                    letter grade and GPA. Also prints out current
                                    Semester GPA and cumulative GPA.
             void take_final() Runs through Course list and takes exams. Then 
                              calls on calculates the grades. Also does tells 
                              course to exams_taken++; Also prints out the Final
                              GPA and Cumulative GPA now. If not classes were taken
                              Then it won't add any new courses or grade points
                              to the cumulative variables. Basically did nothing
                              and there are no repurcussions.
             void study() Will prompt the user to enter the course they want to study
                          for and will print out a list of possible things to study for. 
                          If entering an invalid course name, it will simply return back
                          to the front menu. This is in case they didn't want to study 
                          or hit the wrong choice. If there is a valid course name, then
                          it will search through the array and call the course study which
                          will add another Fact to the list in Fact List.
                          Also calling study when there are no courses listed will also 
                          return the user back to the menu.
             void exam() Takes an exam of the specified course. Like study() if an invalid
                         course name is entered, it will just go back to the menu
                         in case it was a mistake or not ready to take an exam. Once it 
                         is actually called correctly, it will expel out all the facts
                         it has studied for it and print it out as it deletes all the members
                         of the Fact_List this course has. It will then get a random amount
                         of points from Project4.utilities for each fact it has. Then the
                         number grade will be calculated and graded. And then a letter grade
                         will be given.  
